import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ProductT, ProductCard, ProductPrice } from '@/entities/product';
import { AddToCart } from '@/features/add-to-cart';
import { CartDrawer } from '@/widgets/cart-drawer';
import { useMockShop } from '@/shared/hooks';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { ArrowLeft, ShoppingCart } from 'lucide-react';
import { cn } from '@/lib/utils';
import { PageLayout } from '@/shared';
import { ActionFab, CoachBottomSheet } from '@/widgets/coach-entry';

export default function ProductDetail() {
  const { slug } = useParams<{ slug: string }>();
  const navigate = useNavigate();
  const [product, setProduct] = useState<ProductT | null>(null);
  const [recommendations, setRecommendations] = useState<ProductT[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isCoachOpen, setIsCoachOpen] = useState(false);

  const { getProduct, getProducts } = useMockShop();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
  useEffect(() => {
    const loadProduct = async () => {
      if (!slug) return;
      
      try {
        setIsLoading(true);
        const productData = await getProduct(slug);
        setProduct(productData);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        const goals = productData.tags.slice(0, 2);
        const recsResult = await getProducts({
          category: [productData.category],
          goals,
          limit: 3
        });
        setRecommendations(recsResult.items.filter(rec => rec.id !== productData.id));
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load product');
      } finally {
        setIsLoading(false);
      }
    };

    loadProduct();
  }, [slug, getProduct, getProducts]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <PageLayout>
        <div className="min-h-screen bg-bg p-4">
          <div className="flex flex-col items-center justify-center py-16 text-center">
            <div className="text-6xl mb-4">üòû</div>
            <h2 className="text-xl font-semibold text-ink mb-2">
              –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
            </h2>
            <p className="text-muted mb-4">
              –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.
            </p>
            <Button onClick={() => navigate('/shop')} variant="outline">
              –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω
            </Button>
          </div>
        </div>
      </PageLayout>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading || !product) {
    return (
      <PageLayout>
        <div className="min-h-screen bg-bg p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            {/* Header skeleton */}
            <div className="flex items-center gap-4">
              <Skeleton className="w-10 h-10 rounded-full" />
              <Skeleton className="h-8 w-48" />
            </div>

            {/* Image and info skeleton */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <Skeleton className="aspect-square rounded-xl" />
              <div className="space-y-4">
                <Skeleton className="h-8 w-3/4" />
                <Skeleton className="h-6 w-24" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-2/3" />
                <Skeleton className="h-32 w-full" />
              </div>
            </div>
          </div>
        </div>
      </PageLayout>
    );
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ "–ö–æ–º—É –ø–æ–¥–æ–π–¥–µ—Ç" –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤
  const generateTargetAudience = (tags: string[]) => {
    const tagDescriptions: Record<string, string> = {
      '–±–µ–ª–æ–∫': '—Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º –∏ –∞–∫—Ç–∏–≤–Ω—ã–º –ª—é–¥—è–º',
      '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ': '–ª—é–¥—è–º –≤ –ø–µ—Ä–∏–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
      '–º—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞': '—Ç–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–∞—Ä–∞—Å—Ç–∏—Ç—å –º—ã—à—Ü—ã',
      '–ª—ë–≥–∫–æ—Å—Ç—å': '–ª—é–¥—è–º, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—â–∏–º –ª–µ–≥–∫–æ—É—Å–≤–æ—è–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      '–æ–º–µ–≥–∞-3': '–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã',
      '—Å–∏–ª—ã': '–ª—é–¥—è–º —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏',
      '–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å': '—Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
      '–ø—Ä–µ–º–∏—É–º': '–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ',
      '—ç–∫—Å–∫–ª—é–∑–∏–≤': '–¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤',
      '–∞–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã–π': '–¥–ª—è –æ—á–∏—â–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞',
      '–¥–µ—Ç–æ–∫—Å': '–¥–ª—è –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏–∏',
      '–∏–º–º—É–Ω–∏—Ç–µ—Ç': '–¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
      '–∫–æ—Å—Ç–∏': '–¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∫–æ—Å—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏',
      '–∫–∞–ª—å—Ü–∏–π': '–¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ—Å—Ç–µ–π –∏ –∑—É–±–æ–≤',
      '–º–∏–Ω–µ—Ä–∞–ª—ã': '–¥–ª—è –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–Ω–µ—Ä–∞–ª–æ–≤',
      '–î–ù–ö/–†–ù–ö': '–¥–ª—è –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è',
      '–∫–ª–µ—Ç–æ—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ': '–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º–æ–ª–æ–¥–æ—Å—Ç–∏ –∫–ª–µ—Ç–æ–∫',
      '–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç': '–¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–∞–¥–∏–∫–∞–ª–æ–≤',
      '–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ': '–¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è',
      '—Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞': '–¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–¥—Ü–∞',
      '–∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π': '–¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–∞–∫—Ç–µ—Ä–∏–π',
      '–∑–∞—â–∏—Ç–∞': '–¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö —Å–∏–ª –æ—Ä–≥–∞–Ω–∏–∑–º–∞'
    };

    const relevantTags = tags.filter(tag => tagDescriptions[tag]);
    if (relevantTags.length === 0) return '–¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ';

    const descriptions = relevantTags.map(tag => tagDescriptions[tag]);
    if (descriptions.length === 1) return descriptions[0];
    if (descriptions.length === 2) return `${descriptions[0]} –∏ ${descriptions[1]}`;
    
    return `${descriptions.slice(0, -1).join(', ')} –∏ ${descriptions[descriptions.length - 1]}`;
  };

  const targetAudience = generateTargetAudience(product.tags);

  return (
    <PageLayout>
      <div className="min-h-screen bg-bg pt-16">
        {/* Header */}
        <div className="fixed top-0 left-0 right-0 z-50 bg-bg/95 backdrop-blur-sm border-b border-[color-mix(in_oklab,var(--muted)_20%,transparent)] p-4">
          <div className="max-w-4xl mx-auto flex items-center justify-between">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => navigate('/shop')}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="w-4 h-4" />
              –ù–∞–∑–∞–¥
            </Button>

            <CartDrawer>
              <Button variant="outline" size="sm">
                <ShoppingCart className="w-4 h-4 mr-2" />
                –ö–æ—Ä–∑–∏–Ω–∞
              </Button>
            </CartDrawer>
          </div>
        </div>

        <div className="max-w-4xl mx-auto p-4">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
            {/* –ì–∞–ª–µ—Ä–µ—è */}
            <div className="space-y-4">
              <div className="aspect-square rounded-xl overflow-hidden bg-surface">
                {product.image_url ? (
                  <img
                    src={product.image_url}
                    alt={product.title}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-muted">
                    <span className="text-6xl">üõçÔ∏è</span>
                  </div>
                )}
              </div>
              
              {/* –ú–∏–Ω–∏–∞—Ç—é—Ä—ã */}
              {product.image_url && (
                <div className="flex gap-2">
                  <div className="w-16 h-16 rounded-lg overflow-hidden bg-surface border-2 border-brand">
                    <img
                      src={product.image_url}
                      alt={product.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                </div>
              )}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ */}
            <div className="space-y-6">
              {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
              <Badge 
                variant="outline" 
                className={cn(
                  'w-fit text-sm',
                  product.category === 'peptides' 
                    ? 'bg-brand-50 text-brand border-brand/20'
                    : 'bg-accent/10 text-accent border-accent/20'
                )}
              >
                {product.category === 'peptides' ? '–ü–µ–ø—Ç–∏–¥—ã' : '–î–æ–±–∞–≤–∫–∏'}
              </Badge>

              {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
              <h1 className="text-3xl font-bold text-ink leading-tight">
                {product.title}
              </h1>

              {/* –¶–µ–Ω–∞ */}
              <div className="flex items-baseline gap-2">
                <ProductPrice price={product.price_byn} size="lg" />
                <span className="text-muted text-sm">–∑–∞ –µ–¥–∏–Ω–∏—Ü—É</span>
              </div>

              {/* –¢–µ–≥–∏ */}
              {product.tags.length > 0 && (
                <div className="space-y-2">
                  <h3 className="text-sm font-medium text-ink">–¢–µ–≥–∏:</h3>
                  <div className="flex flex-wrap gap-2">
                    {product.tags.map((tag) => (
                      <Badge key={tag} variant="secondary" className="text-xs">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}

              {/* –ö–æ–º—É –ø–æ–¥–æ–π–¥–µ—Ç */}
              <div className="p-4 bg-brand-50 dark:bg-brand-50/20 rounded-lg">
                <h3 className="font-medium text-ink mb-2">–ö–æ–º—É –ø–æ–¥–æ–π–¥–µ—Ç:</h3>
                <p className="text-sm text-ink">{targetAudience}</p>
              </div>

              {/* –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É */}
              <AddToCart product={product} />
            </div>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          {product.description && (
            <div className="mb-12">
              <h2 className="text-2xl font-bold text-ink mb-4">–û–ø–∏—Å–∞–Ω–∏–µ</h2>
              <div className="prose prose-sm max-w-none">
                <p className="text-ink leading-relaxed">{product.description}</p>
              </div>
            </div>
          )}

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          {recommendations.length > 0 && (
            <div className="mb-12">
              <h2 className="text-2xl font-bold text-ink mb-6">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–∞–∫–∂–µ
              </h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {recommendations.map((rec: ProductT) => (
                  <ProductCard
                    key={rec.id}
                    product={rec}
                    onAddToCart={() => {}} // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                  />
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
      
      <ActionFab onAddMeal={() => console.log('Navigate to add meal')} />
      <CoachBottomSheet open={isCoachOpen} onClose={() => setIsCoachOpen(false)} />
    </PageLayout>
  );
}
